{
	// Place your nix-flake-final workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New module": {
		"scope": "nix",
		"prefix": "mod",
		"body":[
			"{",
			"lib,",
			"# An instance of `pkgs` with your overlays and packages applied is also available.",
			"pkgs,",
			"# You also have access to your flake's inputs.",
			"inputs,",
			"# Additional metadata is provided by Snowfall Lib.",
			"namespace, # The namespace used for your flake, defaulting to \"internal\" if not set.",
			"system, # The system architecture for this host (eg. `x86_64-linux`).",
			"target, # The Snowfall Lib target for this system (eg. `x86_64-iso`).",
			"format, # A normalized name for the system target (eg. `iso`).",
			"virtual, # A boolean to determine whether this system is a virtual target using nixos-generators.",
			"systems, # An attribute map of your defined hosts.",
			"# All other arguments come from the module system.",
			"config,",
			"...",
			"}: let",
			"cfg = config.\\${namespace}.$1;",
			"in {",
			"options.tsunaminoai.$1 = with lib.types; {$0};",
			"config = lib.mkMerge [];",
			"}"
		],
		"description": "Create a new module"
	}
}